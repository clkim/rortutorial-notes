---
layout: post
title: Chapter 1 &nbsp; From zero to deploy
subtitle: A journey of 1000 miles begins with... - Laozi
---
h2. Section:

h3. 1.2.1 Development environments
* Text editor
** Tried Sublime Text as recommended (beta, may not be free going forward; like it so far)
** Doing 'subl' at cmd prompt does not launch Sublime Text, so
*** created a .bat file named 'subl.bat' (that's the letter L in the name, not the number 1) containing following 2 lines, with Sublime Text 2 installed at the location indicated
  &nbsp; @echo off
  &nbsp; start "" "C:\Program Files\Sublime Text 2\sublime_text.exe" %1
*** placed the .bat file in the folder where sublime_text.exe is stored
*** added folder-path to the Path environment variable; chose to add it to 'User variables' instead of 'System variables' of the Environment Variables
*** usage could be
  @$>subl@
  or
  @$>subl Gemfile@

* Command Prompt
** Found the shortcut 'Command prompt with Ruby and Rails' here (see Rails Installer below):
  &nbsp; Start | All Programs | RailsInstaller
  Awesome built-in Cygwin-like unix commands (but very slow execution of first command)

h3. 1.2.2 Ruby, RubyGems, Rails, and Git
* Rails Installer (Windows)
  ** Used link in Tutorial to install git, Ruby, RubyGems, Rails...
  ** Then used installed RubyGems to check own version and did update needed (see RubyGems below)
  ** Used RubyGems to install other gem packages such as pik, or do update of a gem package such as Rails as needed (see Rails below)
* RubyGems
  ** @$>gem -v@
  ** Compared version with that used in Tutorial, so as to prevent conflicts; had older version, so used command given in Tutorial to update RubyGems
* Ruby / pik
  ** Used link in Tutorial to install pik, which can be used to manage/update the installed Ruby version
  ** Followed README in github repository
  *** used @$>gem install pik@ to install pik, then
  *** ran @$>pik_install <folder>@, then
  *** placed folder location in Path environment variable (I again chose to add that folder-path to Path environment variable in 'User variables'
  ** To upgrade Ruby version, did:
  *** @$>ruby -v@					&nbsp; [to check installed Ruby version, e.g. ruby 1.9.2p290...]
  *** @$>pik install ruby 1.9.3@	&nbsp; ['yes' if asked to download 7zip utility to extract file]
  *** @$>pik list@					&nbsp; ['192: ruby 1.9.2p290...' and '193: ruby 1.9.3p125...']
  *** @$>pik use 193@
  *** @$>ruby -v@					&nbsp; [installed version now e.g. ruby 1.9.3p125...]
  ** Caveat: It appears that the desired version of Ruby has to be installed at the beginning.
  *** I tried changing the Ruby version to 1.9.3 after completing Chap 3 and sample_app had already been created, but nothing worked:
  $>bundle show rspec, $>rspec -v, $>rails console, etc. all did not run
  *** Did @$>pik default@ to switch back to original Ruby version, seemed to revert everything back ok :)
* Install Rails
  ** @$>rails -v@           		&nbsp; [Rails Installer installed 3.1.1, Tutorial uses 3.2.1]
  ** @$>gem update rails@   		&nbsp; [Don't see option to specify version; updated to 3.2.1 for me but may be different version in future; workaround could be to do @$>gem uninstall rails@, then do @$>gem install rails -v 3.2.1@]

h3. 1.2.4 Bundler
* After editing the Gemfile in first_app (should now be in C:\Sites\rails_projects\first_app), do @$>bundle install@

h3. 1.3.1 Installation and setup

h4. First-time system setup
  * To verify git system setup configured, used @$>git config --global --get user.name@ 
  * If want to use Notepad++ as the editor Git will use for commit messages, do following, which is stored in C:\Users\yourname\.gitconfig file
  @$>git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"@

h3. 1.4.1 Heroku setup
  * Signed up for a free Heroku account
  ** followed Heroku instructions to download a Windows client
  ** then opened a Windows cmd prompt and did a heroku login as described in Heroku's 'Getting started'; a SSH public key (generated by Rails Installer) should be automatically found by Heroku and uploaded
  ** _don't_ do a @heroku create -- stack cedar@ in this windows cmd prompt
  * Closed and reopened the 'Command prompt with Ruby and Rails' cmd prompt window so that it knows about the Heroku client just downloaded
  * Continued as in the Tutorial at the cmd prompt C:\Sites\rails_projects\first_app>
  @$>gem install heroku@
  @$>heroku create --stack cedar@
  * Must see in console the message "Git remote heroku added", otherwise deploying to heroku with
  @$>git push heroku master@ as in the Tutorial will not work
