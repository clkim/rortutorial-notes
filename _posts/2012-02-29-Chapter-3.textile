---
layout: post
title: Chapter 3 &nbsp; Mostly static pages
subtitle: Not Your Parents' Software Testing
---

h2. Section:

h3. 3.2.1 Test-driven development

h4. Getting color output from RSpec
* To get color text in cmd prompt window from RSpec, check whether there is a file named .rspec in the application root, and "download 'ansicon' from here":https://github.com/adoxa/ansicon/downloads
To see Help, run 'ansicon -h' from the x64 subfolder after unzipping.
  ** Add <code>--colour</code> to .rspec file in the application root, if not there.
  ** Set the environment variable Path to point to the x64 subfolder under where you unzip ansicon; now, can get color output from RSpec by running ansicon manually as follows:
    *** Get the cmd prompt using the 'Command Prompt with Ruby and Rails' shortcut as described in notes for Section 1.2.1
    *** Change directory to the app root, then run e.g. C:\Sites\rails_project\sample_app, then run @$>ansicon -p@
    *** Now any output from rspec run from that cmd prompt window would be in color
  ** I preferred to set up a modified cmd prompt shortcut as follows:
    *** Copy the 'Command Prompt with Ruby and Rails' shortcut in Start | All Programs | RailsInstaller
    *** In Properties | 'Shortcut' tab | 'Target:', I run ansicon before running the rest of the commands specified in Target; so Target is <pre><code>C:\Users\<username><path_ansi151_unzipped>\x64\ansicon.exe C:\Windows\System32\cmd.exe /E:ON /K C:\RailsInstaller\Ruby1.9.2\setup_environment.bat C:\RailsInstaller </code></pre>
    *** In 'Shortcut' tab | Start in: | I entered "C:\Sites\rails_projects\sample_app" for convenience while working on sample_app in Chap 3 and beyond
    *** In 'General' tab | I renamed shortcut 'ansicon Command Prompt with Ruby and Rails' 

h3. 3.6.1 Eliminating bundle exec
* On Windows 7, doesn't work as described with @$>bin/rspec spec/@ or with @$>.\bin\rspec spec/@ after doing @$>bundle --binstub@. Workaround is to set Path to bin directory under application root. I chose to create a User environment variable, e.g. RORAILS_sample_app_bin and gave it value of the path to the bin directory, then added %RORAILS_sample_app_bin% to the Path in User variable. Now, rspec can be run without 'bundle exec'. So, can be in application root and just run @$>rspec spec\requests\static_pages_spec.rb@

h3. 3.6.3 Speeding up tests with Spork
* [Typo/Clarification] Listing 3.34 A Gemfile for the sample app seems to be missing "~>" for entry: gem 'spork', '~>0.9.0'
* @$>time bundle exec rspec ...@ does not work on Windows; 'time' only takes arg -t to output current time, or ask for new time
** Somewhat faster to run tests with Spork, but not the speedups implied in Tutorial
